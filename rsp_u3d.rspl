include "rsp.inc"

// some dummy defines to make it work without libdragon
#define RSPQ_BeginOverlayHeader ;
#define RSPQ_EndOverlayHeader ;
#define RSPQ_BeginSavedState ;
#define RSPQ_EndSavedState ;

#define TRI_COMMAND 0xCF00

state 
{
  u8 SHIFT_DATA[8];
  
  u32 VERTEX_ADDR;
  u32 VERTEX_ADDR_END;
  s16 DISPLACE_FACTOR[2];
  
  alignas(8) u16 MATRIX[3][4]; // fractional matrix for scaling + rotation

  alignas(16) u8 RSPQ_DMEM_BUFFER[128];

  /**
   * 
   * Buffer format (RDPQ_Triangle compatible):
   * @TODO: remove clip pos
   * 
   *   Type |     Name  | Offset
   * -------+-----------+--------
   * s16[2] | Pos-XY    | 0x00
   * s16    | Depth     | 0x04
   * u8     | Clip-Code | 0x06
   * u8     | Rej. Code | 0x07
   * u8[4]  | Color     | 0x08
   * s16[2] | UV        | 0x0C
   * s16[3] | Clip-Pos  | 0x10  (t3d specific)
   * s16    | W         | 0x16
   * f16[3] | Clip-Pos  | 0x18  (t3d specific)
   * f16    | W         | 0x1E
   * s16.16 | InvW      | 0x20
   * -------+-----------+-0x24---
   */
  alignas(16) u8 TRI_BUFF[3][64];
  alignas(16) u8 VERT_BUFF[32];

  vec16 RSPQ_SCRATCH_MEM; 
}

// See rspq_triangle.inc
function RDPQ_Triangle(
  u32<$a0> triCmd, 
  u16<$a1> vtx1, u16<$a2> vtx2, u16<$a3> vtx3,
  u16<$v0> cull, u16<$s3> ptrDMEM
);

// DMA from RDRAM into DMEM
macro dmaInAsync(u32 addrRDRAM, u32 addrDMEM, u32 size)
{
  @Barrier("DMA") set_dma_addr_rsp(addrDMEM);
  @Barrier("DMA") set_dma_addr_rdram(addrRDRAM);
  @Barrier("DMA") set_dma_read(size);
}

// DMA from DMEM into RDRAM
macro dmaOutAsync(u32 addrRDRAM, u32 addrDMEM, u32 size)
{
  @Barrier("DMA") set_dma_addr_rsp(addrDMEM);
  @Barrier("DMA") set_dma_addr_rdram(addrRDRAM);
  @Barrier("DMA") set_dma_write(size);
}

/**
 * RSPL relies on some vector registers setup by 'rsp_queue.inc' in libdragon.
 * Replicate the setup here for the two shift and zero register values.
 */
macro globalSetup()
{
  undef VSHIFT; undef VSHIFT8;
  vec16<$v30> VSHIFT; // make writable
  vec16<$v31> VSHIFT8;

  asm("vxor $v00, $v00, $v00");
  VSHIFT8 = load_vec_s8(ZERO);
  VSHIFT = VSHIFT8 >>> 8;
}

@NoReturn
function Main()
{
  globalSetup();

  // Note: those registers will survive the entire loop and a RDPQ_Triangle_Send_Async call
  u32<$s6> vertRDRAM = load(VERTEX_ADDR);
  u32<$s5> vertRDRAMEnd = load(VERTEX_ADDR_END);
  //u32<$s4> dplRDRAM = load(RDPQ_CURRENT);

  // man loop that will load in vertices, converts them to RDP commands
  // and writes them out for the RDP.
  MAIN_LOOP:
  // print(vertRDRAM, vertRDRAMEnd);

  // Load vertices
  u32 vertDMEM  = VERT_BUFF;
  u32 vertSize = 24;
 
  dmaInAsync(vertRDRAM, vertDMEM, vertSize);
  vertRDRAM += vertSize; 

  u32 vertDMEMEnd = vertDMEM + vertSize;
  vec16 screenOffset = 0x200; // (needed for depth)

  // postion is stored as the W component of the matrix in the first two rows
  screenOffset.x = load(ZERO, 30).x;  
  screenOffset.y = load(ZERO, 38).x;
  
  u16<$s3> dplDMEM = RSPQ_DMEM_BUFFER;

  vec16 displaceFac;
  displaceFac.x = load(ZERO, 18).x;
  
  vec16 mat0 = load(ZERO, 24).xyzwxyzw;
  vec16 mat1 = load(ZERO, 32).xyzwxyzw;   
  vec16 mat2 = load(ZERO, 40).xyzwxyzw; 

  // @TODO: hardcode in rdpq_triangle?
  u16<$a1> vtx1 = TRI_BUFF; 
  u16<$a2> vtx2 = vtx1 + 64;
  u16<$a3> vtx3; 

  loop { 
    RA = get_dma_busy();
    vtx3 = vtx2 + 64; // fill delay slot
  } while(RA != 0)

  vec16 posA = load_vec_s8(vertDMEM);
  vec16 displ = posA:sfract * displaceFac:sfract.x;
  displ:sfract *= posA:sfract.Z;
  displ = mat0:sfract +* displ:sfract; 
  
  loop {
    // xyz_ = position, XYZ_ = normal (w & W are unused)
    vec16 pos = load_vec_s8(vertDMEM);
    
    // transform position & normals, this is only rotation.
    // since the matrix is a 16bit fractional, we can apply it to both position and normals
    VTEMP = mat0:sfract  * pos.xxxxXXXX;  
    VTEMP = mat1:sfract +* pos.yyyyYYYY; 
    pos   = mat2:sfract +* pos.zzzzZZZZ;

    vec16 spec = VZERO - pos.Z;

    // fresnel, we scale it up a bit to have a very sharp falloff
    vec16 fresnel = pos:ufract * pos:ufract.Z;
    fresnel:sint *= 2;
  
    // specular, square inverted fresnel a few times here
    // since it's the same operation it will vanish during compression
    spec:ufract *= spec:ufract; 
    spec:ufract *= spec:ufract; 
    spec:ufract *= spec:ufract; 
    vec16 col = spec:ufract * spec:ufract; 
    col:sint *= 2;
  
    col.w = fresnel.Z; // merge fresnel and specular into on color
 
    pos:sfract += displ:sfract; // also does clamping

    // basic uvgen, take the XY of the normals to generate spherical UVs  
    vec16 uv = pos >> 6;
    

    // offset in screen-space, this also means the model will not get scaled or moved in 3D, only 2D
    pos = uv + screenOffset;
    
    // write-back for RDPQ_Triangle
    @Barrier("attr") store(pos.xyzw, vtx1, 0); 
    @Barrier("attr") store_vec_u8(col.x, vtx1, 8);
    @Barrier("attr") store(uv.XY, vtx1, 0xC); 

    vtx1 += 64;
    vertDMEM += 8; 
  } while(vertDMEM != vertDMEMEnd)

  vtx1 = TRI_BUFF;

  u32<$a0> triCmd;
  u16<$v0> cull;
  
  // wait for the RDP to catch up from the last iteration

  u32 curr, end;
  loop {
    curr = get_rdp_current();
    end = get_rdp_end(); 
    cull = 1; // fill delay slot
  } while(curr != end)
 
  set_rdp_start(dplDMEM);

  //RDPQ_Triangle(triCmd, vtx1, vtx2, vtx3, cull, dplDMEM);
  asm_include("./rspq_triangle.inc");
  RDPQ_Triangle_Skip: 
  
  const u8 CMD_SYNC_FULL = 0x29; 
  if(vertRDRAM == vertRDRAMEnd) 
  {
    store(CMD_SYNC_FULL, dplDMEM);
    dplDMEM += 8;
  }

  set_rdp_end(dplDMEM);

  if(vertRDRAM != vertRDRAMEnd) {
    goto MAIN_LOOP;
  }

  asm("break"); // halts RSP
} 

